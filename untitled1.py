# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CiGBmQUdkz3KM4XrrBPwlLKQ62orNhzw
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Sample dataset with models and criteria (higher accuracy is better, lower inference time and memory usage is better)
models = ['Model A', 'Model B', 'Model C', 'Model D']
data = np.array([
    [0.85, 50, 200],  # Model A
    [0.90, 45, 180],  # Model B
    [0.88, 55, 190],  # Model C
    [0.87, 40, 210]   # Model D
])

# Define weights (importance of each criterion)
weights = np.array([0.5, 0.3, 0.2])  # Example weights for Accuracy, Inference Time, Memory Usage

# Define criteria type: 1 for benefit (higher is better), -1 for cost (lower is better)
criteria = np.array([1, -1, -1])

# Normalize the decision matrix
norm_data = data / np.sqrt((data ** 2).sum(axis=0))

# Weighted normalized decision matrix
weighted_norm_data = norm_data * weights

# Identify ideal best and ideal worst solutions
ideal_best = np.max(weighted_norm_data * (criteria == 1), axis=0) + np.min(weighted_norm_data * (criteria == -1), axis=0)
ideal_worst = np.min(weighted_norm_data * (criteria == 1), axis=0) + np.max(weighted_norm_data * (criteria == -1), axis=0)

# Calculate distances to ideal best and worst solutions
distance_best = np.sqrt(((weighted_norm_data - ideal_best) ** 2).sum(axis=1))
distance_worst = np.sqrt(((weighted_norm_data - ideal_worst) ** 2).sum(axis=1))

# Compute TOPSIS score
score = distance_worst / (distance_best + distance_worst)

# Rank models
rankings = np.argsort(score)[::-1]
ranked_models = [(models[i], score[i]) for i in rankings]

# Display results in a table
results_df = pd.DataFrame(ranked_models, columns=["Model", "TOPSIS Score"])
print("Ranking of models based on TOPSIS:")
print(results_df)

# Visualization
plt.figure(figsize=(8, 5))
sns.barplot(x=results_df["TOPSIS Score"], y=results_df["Model"], palette="viridis")
plt.xlabel("TOPSIS Score")
plt.ylabel("Model")
plt.title("Ranking of Models Based on TOPSIS")
plt.show()